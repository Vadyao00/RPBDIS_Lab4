// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPBDIS_Lab4.Data;

#nullable disable

namespace RPBDIS_Lab4.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActorsActorId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("EmployeeEvent", b =>
                {
                    b.Property<Guid>("EmployeesEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventsEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeesEmployeeId", "EventsEventId");

                    b.HasIndex("EventsEventId");

                    b.ToTable("EmployeeEvent");
                });

            modelBuilder.Entity("EmployeeShowtime", b =>
                {
                    b.Property<Guid>("EmployeesEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowtimesShowtimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeesEmployeeId", "ShowtimesShowtimeId");

                    b.HasIndex("ShowtimesShowtimeId");

                    b.ToTable("EmployeeShowtime");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Actor", b =>
                {
                    b.Property<Guid>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Movie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AgeRestriction")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductionCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Seat", b =>
                {
                    b.Property<Guid>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShowtimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeatId");

                    b.HasIndex("EventId");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Showtime", b =>
                {
                    b.Property<Guid>("ShowtimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ShowtimeId");

                    b.HasIndex("MovieId");

                    b.ToTable("Showtimes");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId");

                    b.HasIndex("SeatId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.WorkLog", b =>
                {
                    b.Property<Guid>("WorkLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("WorkExperience")
                        .HasColumnType("int");

                    b.Property<decimal>("WorkHours")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WorkLogId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkLogs");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPBDIS_Lab4.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeEvent", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPBDIS_Lab4.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeShowtime", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPBDIS_Lab4.Models.Showtime", null)
                        .WithMany()
                        .HasForeignKey("ShowtimesShowtimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Movie", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Seat", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Event", "Event")
                        .WithMany("Seats")
                        .HasForeignKey("EventId");

                    b.HasOne("RPBDIS_Lab4.Models.Showtime", "Showtime")
                        .WithMany("Seats")
                        .HasForeignKey("ShowtimeId");

                    b.Navigation("Event");

                    b.Navigation("Showtime");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Showtime", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Movie", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Ticket", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.WorkLog", b =>
                {
                    b.HasOne("RPBDIS_Lab4.Models.Employee", "Employee")
                        .WithMany("WorkLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Employee", b =>
                {
                    b.Navigation("WorkLogs");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Event", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Movie", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("RPBDIS_Lab4.Models.Showtime", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
